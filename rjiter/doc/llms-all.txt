# RJiter - Complete Cargo Doc Documentation

This file contains all public interfaces and documentation that would be available through `cargo doc`.

## File: src/rjiter.rs

### Structs
#### RJiter
Streaming JSON parser, a wrapper around `Jiter`.
```rust
pub struct RJiter<'rj> {
    jiter: Jiter<'rj>,
    buffer: Buffer<'rj>,
}
```
**Fields:**
- `jiter: Jiter<'rj>`
- `buffer: Buffer<'rj>`

### Functions
#### new
Constructs a new `RJiter`.

# Arguments
- `reader`: The json stream
- `buf`: The working buffer
```rust
pub fn new(reader: &'rj mut dyn Read, buf: &'rj mut [u8]) -> Self
```

#### peek
See `Jiter::peek`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn peek(&mut self) -> RJiterResult<Peek>
```

#### known_array
See `Jiter::known_array`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_array(&mut self) -> RJiterResult<Option<Peek>>
```

#### known_bool
See `Jiter::known_bool`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_bool(&mut self, peek: Peek) -> RJiterResult<bool>
```

#### known_bytes
See `Jiter::known_bytes`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_bytes(&mut self) -> RJiterResult<&[u8]>
```

#### known_float
See `Jiter::known_float`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_float(&mut self, peek: Peek) -> RJiterResult<f64>
```

#### known_int
See `Jiter::known_int`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_int(&mut self, peek: Peek) -> RJiterResult<NumberInt>
```

#### known_null
See `Jiter::known_null`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_null(&mut self) -> RJiterResult<()>
```

#### known_number
See `Jiter::known_number`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_number(&mut self, peek: Peek) -> RJiterResult<NumberAny>
```

#### known_object
See `Jiter::known_object`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_object(&mut self) -> RJiterResult<Option<&str>>
```

#### known_skip
See `Jiter::known_skip`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_skip(&mut self, peek: Peek) -> RJiterResult<()>
```

#### known_str
See `Jiter::known_str`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_str(&mut self) -> RJiterResult<&str>
```

#### known_value
See `Jiter::known_value`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_value(&mut self, peek: Peek) -> RJiterResult<JsonValue<'rj>>
```

#### known_value_owned
See `Jiter::known_value_owned`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn known_value_owned(&mut self, peek: Peek) -> RJiterResult<JsonValue<'static>>
```

#### next_array
See `Jiter::next_array`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_array(&mut self) -> RJiterResult<Option<Peek>>
```

#### array_step
See `Jiter::array_step`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn array_step(&mut self) -> RJiterResult<Option<Peek>>
```

#### next_bool
See `Jiter::next_bool`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_bool(&mut self) -> RJiterResult<bool>
```

#### next_bytes
See `Jiter::next_bytes`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_bytes(&mut self) -> RJiterResult<&[u8]>
```

#### next_float
See `Jiter::next_float`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_float(&mut self) -> RJiterResult<f64>
```

#### next_int
See `Jiter::next_int`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_int(&mut self) -> RJiterResult<NumberInt>
```

#### next_key
See `Jiter::next_key`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_key(&mut self) -> RJiterResult<Option<&str>>
```

#### next_key_bytes
See `Jiter::next_key_bytes`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_key_bytes(&mut self) -> RJiterResult<Option<&[u8]>>
```

#### next_null
See `Jiter::next_null`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_null(&mut self) -> RJiterResult<()>
```

#### next_number
See `Jiter::next_number`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_number(&mut self) -> RJiterResult<NumberAny>
```

#### next_number_bytes
See `Jiter::next_number_bytes`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_number_bytes(&mut self) -> RJiterResult<&[u8]>
```

#### next_object
See `Jiter::next_object`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_object(&mut self) -> RJiterResult<Option<&str>>
```

#### next_object_bytes
See `Jiter::next_object_bytes`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_object_bytes(&mut self) -> RJiterResult<Option<&[u8]>>
```

#### next_skip
See `Jiter::next_skip`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_skip(&mut self) -> RJiterResult<()>
```

#### next_str
See `Jiter::next_str`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_str(&mut self) -> RJiterResult<&str>
```

#### next_value
See `Jiter::next_value`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_value(&mut self) -> RJiterResult<JsonValue<'rj>>
```

#### next_value_owned
See `Jiter::next_value_owned`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn next_value_owned(&mut self) -> RJiterResult<JsonValue<'static>>
```

#### finish
See `Jiter::finish`
# Errors
`std::io::Error` or `JiterError`
```rust
pub fn finish(&mut self) -> RJiterResult<()>
```

#### current_index
```rust
pub fn current_index(&self) -> usize
```

#### error_position
```rust
pub fn error_position(&self, index: usize) -> LinePosition
```

#### write_long_bytes
Write-read-write-read-... until the end of the json string.
The bytes are written as such, without transforming them.
This function is useful to copy a long json string to another json.

Rjiter should be positioned at the beginning of the json string, on a quote character.
Bounding quotes are not included in the output.

# Errors
`std::io::Error` or `JiterError`
```rust
pub fn write_long_bytes(&mut self, writer: &mut dyn Write) -> RJiterResult<()>
```

#### write_long_str
Write-read-write-read-... until the end of the json string.
Converts the json escapes to the corresponding characters.

Rjiter should be positioned at the beginning of the json string, on a quote character.
Bounding quotes are not included in the output.

# Errors
`std::io::Error` or `JiterError`
```rust
pub fn write_long_str(&mut self, writer: &mut dyn Write) -> RJiterResult<()>
```

#### known_skip_token
Skip the token if found, otherwise return an error.
`RJiter` should be positioned at the beginning of the potential token using `peek()` or `finish()`

# Errors
`std::io::Error` or `RJiterError(ExpectedSomeIdent)`
```rust
pub fn known_skip_token(&mut self, token: &[u8]) -> RJiterResult<()>
```

### Implementations
#### impl RJiter
**Methods:**
##### new
Constructs a new `RJiter`.

# Arguments
- `reader`: The json stream
- `buf`: The working buffer
```rust
pub fn new(reader: &'rj mut dyn Read, buf: &'rj mut [u8]) -> Self
```


## File: src/buffer.rs

### Structs
#### Buffer
A buffer for reading JSON data.
Is a private struct, the "pub" is only for testing.
```rust
pub struct Buffer<'buf> {
    reader: &'buf mut dyn Read,
    pub buf: &'buf mut [u8],
    pub n_bytes: usize, // Size of the buffer. Contract: `n_bytes <= buf.len()`
    pub n_shifted_out: usize, // Number of bytes shifted out
    pub pos_shifted: LinePosition, // Correction for the error position due to shifting
}
```
**Fields:**
- `reader: &'buf mut dyn Read`
- `buf: &'buf mut [u8]`
- `n_bytes: usize`
- `Contract: `n_bytes <= buf.len()``
- `n_shifted_out: usize`
- `pos_shifted: LinePosition`

### Functions
#### new
```rust
pub fn new(reader: &'buf mut dyn Read, buf: &'buf mut [u8]) -> Self
```

#### read_more
Read from the underlying reader into the buffer.

Returns the number of bytes read.

# Errors

From the underlying reader.
```rust
pub fn read_more(&mut self) -> std::io::Result<usize>
```

#### shift_buffer
Shift the buffer to the left, and update the index and line-column position.

# Arguments

* `to_pos`: The position to shift to. Usually is 0 or is 1 for strings.
* `from_pos`: The position to shift from. The case of outside the buffer is handled.
```rust
pub fn shift_buffer(&mut self, to_pos: usize, from_pos: usize)
```

#### skip_spaces
Skip over any ASCII whitespace characters starting at the given position.
Read-shift-read-shift-read-shift... until non-whitespace is found or EOF is reached.

# Arguments

* `pos` - The position in the buffer to start skipping from

# Errors

From the underlying reader.
```rust
pub fn skip_spaces(&mut self, pos: usize) -> std::io::Result<()>
```

#### new
```rust
pub fn new(buf: &Buffer) -> Self
```

#### is_changed
```rust
pub fn is_changed(&self, buf: &Buffer) -> bool
```

### Implementations
#### impl Buffer
**Methods:**
##### new
```rust
pub fn new(reader: &'buf mut dyn Read, buf: &'buf mut [u8]) -> Self
```


#### impl ChangeFlag
**Methods:**
##### new
```rust
pub fn new(buf: &Buffer) -> Self
```


## File: src/error.rs

### Type Aliases
```rust
pub type Result<T> = std::result::Result<T, Error>;
```

### Structs
#### Error
```rust
pub struct Error {
    pub error_type: ErrorType,
    pub index: usize,
}
```
**Fields:**
- `error_type: ErrorType`
- `index: usize`

### Enums
#### ErrorType
```rust
pub enum ErrorType {
    JsonError(JsonErrorType),
    WrongType {
        expected: JsonType,
        actual: JsonType,
    }
```
**Variants:**
- `JsonError`
- `WrongType`
- `expected`
- `JsonType`
- `actual`
- `JsonType`

### Functions
#### get_position
```rust
pub fn get_position(&self, rjiter: &RJiter) -> LinePosition
```

#### description
```rust
pub fn description(&self, rjiter: &RJiter) -> String
```

### Implementations
#### impl Error

## File: src/lib.rs

### Public Re-exports
```rust
pub use error::Error;
```
```rust
pub use error::Result;
```
```rust
pub use rjiter::RJiter;
```
```rust
pub use jiter;
```
