# scan_json - Complete API Reference

## Crate Information
- **Name**: scan_json
- **Version**: 1.1.0
- **Authors**: Oleg Parashchenko <olpa@uucode.com>
- **Description**: React to elements in a JSON stream
- **License**: MIT
- **Homepage**: https://github.com/olpa/streaming_json
- **Repository**: https://github.com/olpa/streaming_json
- **Categories**: parser-implementations, parsing
- **Keywords**: json

## Public Modules

### action
Contains types and functionality for defining callbacks.

### error  
Error types for JSON stream processing.

### idtransform
Copy JSON input to output, retaining the original structure and collapsing whitespace.

### matcher
Contains the `Matcher` trait and implementations for matching JSON nodes.

### scan
Implementation of the `scan` function to scan a JSON stream.

## Re-exported Dependencies
- `rjiter` - streaming JSON parser
- `rjiter::jiter` - lower-level JSON iteration types
- `rjiter::RJiter` - main JSON iterator type

## Public Types

### StreamOp
```rust
pub enum StreamOp {
    None,                                    // No special action needed
    ValueIsConsumed,                         // Action consumed the JSON value
    Error(Box<dyn std::error::Error>),       // Action failed with error
}
```

### Type Aliases
```rust
pub type BoxedMatcher<'a> = Box<dyn Matcher + 'a>;
pub type BoxedAction<'a, T> = Box<dyn Fn(&RefCell<RJiter>, &RefCell<T>) -> StreamOp + 'a>;
pub type BoxedEndAction<'a, T> = Box<dyn Fn(&RefCell<T>) -> std::result::Result<(), Box<dyn std::error::Error>> + 'a>;
```

### Trigger
```rust
pub struct Trigger<'a, BoxedActionT> {
    pub matcher: BoxedMatcher<'a>,
    pub action: BoxedActionT,
}

impl<'a, BoxedActionT> Trigger<'a, BoxedActionT> {
    pub fn new(matcher: BoxedMatcher<'a>, action: BoxedActionT) -> Self
}
```

### Error
```rust
pub enum Error {
    RJiterError(rjiter::Error),
    UnhandledPeek(rjiter::jiter::Peek, usize),
    UnbalancedJson(usize),
    InternalError(usize, String),
    MaxNestingExceeded(usize, usize),
    ActionError(Box<dyn std::error::Error>, usize),
    IOError(std::io::Error),
}

pub type Result<T> = std::result::Result<T, Error>;
```

## Matcher Trait and Implementations

### Matcher Trait
```rust
pub trait Matcher: std::fmt::Debug {
    fn matches(&self, name: &str, context: &[ContextFrame]) -> bool;
}
```

### Name Matcher
```rust
pub struct Name {
    // matches exact key names
}

impl Name {
    pub fn new(name: String) -> Self
}
```

### ParentAndName Matcher
```rust
pub struct ParentAndName {
    // matches key names with specific parent context
}

impl ParentAndName {
    pub fn new(parent: String, name: String) -> Self
}
```

### ParentParentAndName Matcher
```rust
pub struct ParentParentAndName {
    // matches key names with specific grandparent+parent context
}

impl ParentParentAndName {
    pub fn new(grandparent: String, parent: String, name: String) -> Self
}
```

### DebugPrinter Matcher
```rust
pub struct DebugPrinter;
// Debug matcher that prints matching context and always returns false
```

## Scan Module

### Options
```rust
pub struct Options {
    pub sse_tokens: Vec<String>,    // SSE tokens to ignore at top level
    pub stop_early: bool,           // Stop as soon as possible vs scan complete stream
}

impl Options {
    pub fn new() -> Self
}
```

### ContextFrame
```rust
pub struct ContextFrame {
    pub current_key: String,
    // private fields: is_in_object, is_in_array, is_elem_begin
}

pub fn mk_context_frame_for_test(current_key: String) -> ContextFrame
```

### scan Function
```rust
pub fn scan<T: ?Sized>(
    triggers: &[Trigger<BoxedAction<T>>],
    triggers_end: &[Trigger<BoxedEndAction<T>>],
    rjiter_cell: &RefCell<RJiter>,
    baton_cell: &RefCell<T>,
    working_buffer: &mut U8Pool,
    options: &Options,
) -> Result<()>
```

**Working Buffer Defaults:**
- **Recommended size**: 512 bytes
- **Recommended max items**: 20 nesting levels
- **Usage**: `U8Pool::new(&mut buffer, 20)`

Main function to scan JSON streams with triggers. Processes JSON incrementally, executing actions when matchers succeed.

**Parameters:**
- `triggers` - Action triggers for matching keys
- `triggers_end` - End action triggers for when keys finish processing
- `rjiter_cell` - JSON iterator in RefCell
- `baton_cell` - User state/context in RefCell
- `options` - Configuration options

**Returns:** `Result<()>` - Success or scan error

**Errors:**
- `ScanError` - Wrapper over RJiter errors, action errors, or JSON structure errors

## Identity Transform Module

### copy_atom Function
```rust
pub fn copy_atom(
    peeked: rjiter::jiter::Peek,
    rjiter: &mut RJiter,
    writer: &mut dyn Write
) -> Result<()>
```

Copy a JSON atom (string, number, boolean, or null) from input to output, advancing the iterator.

**Parameters:**
- `peeked` - The peeked token type
- `rjiter` - JSON iterator (mutable)
- `writer` - Output writer

**Returns:** `Result<()>` - Success or error

**Errors:**
- Malformed JSON
- IO errors during writing
- Unexpected token types

### idtransform Function
```rust
pub fn idtransform(
    rjiter_cell: &RefCell<RJiter>,
    writer: &mut dyn Write,
    working_buffer: &mut U8Pool,
) -> Result<()>
```

Copy JSON input to output, retaining original structure and collapsing whitespace. Serves as complete example of advanced scan usage.

**Parameters:**
- `rjiter_cell` - JSON iterator in RefCell
- `writer` - Output writer
- `working_buffer` - Working buffer for context stack (see `scan` function for sizing details)

**Returns:** `Result<()>` - Success or error

**Errors:**
- All scan errors (malformed JSON, nesting too deep, etc.)
- IO errors during writing

## Special Key Names

The scan function recognizes special key names for structural elements:

- `#top` - Top-level context
- `#array` - Array structures
- `#object` - Object structures (unnamed objects inside arrays or at top level)
- `#atom` - Atomic values (strings, numbers, booleans, null)

## Usage Patterns

### Basic Action Pattern
```rust
|rjiter_cell: &RefCell<RJiter>, context_cell: &RefCell<T>| -> StreamOp {
    let mut rjiter = rjiter_cell.borrow_mut();
    let mut context = context_cell.borrow_mut();
    
    match rjiter.peek() {
        Ok(peeked) => {
            // Process the value
            match process_value(peeked, &mut rjiter, &mut context) {
                Ok(_) => StreamOp::ValueIsConsumed,
                Err(e) => StreamOp::Error(Box::new(e)),
            }
        }
        Err(e) => StreamOp::Error(Box::new(e)),
    }
}
```

### End Action Pattern
```rust
|context_cell: &RefCell<T>| -> std::result::Result<(), Box<dyn std::error::Error>> {
    let mut context = context_cell.borrow_mut();
    // Cleanup or finalization logic
    Ok(())
}
```

## Constants

- `MAX_NESTING: usize = 20` - Maximum allowed JSON nesting depth

## Error Position Information

All errors include position information (byte offset) from the JSON input stream to help with debugging and error reporting.

## Thread Safety

The crate uses `RefCell` for interior mutability and is designed for single-threaded use. The JSON parser and user context are passed as `RefCell` references to enable shared mutable access across triggers.

## Performance Considerations

- Streaming architecture avoids loading entire JSON documents
- Callback-based processing enables early termination
- Minimal memory footprint for large JSON processing
- Buffer size configurable through RJiter initialization