# scan_json - React to elements in a JSON stream

## Overview
scan_json is a Rust crate that enables processing JSON streams using a trigger-based architecture. Instead of loading entire JSON documents into memory, it processes JSON incrementally, executing user-defined actions when specific JSON keys are encountered.

## Core Concepts

### Triggers
A trigger combines a **matcher** (determines which JSON keys to react to) and an **action** (what to do when the key is found). The main entry point is the `scan()` function which processes a JSON stream using registered triggers.

### Matchers
- `Name` - matches exact key names
- `ParentAndName` - matches key names with specific parent context
- `ParentParentAndName` - matches key names with specific grandparent+parent context
- `DebugPrinter` - debug matcher that prints matching context

### Actions
Actions are callback functions that receive:
- `rjiter_cell`: RefCell<RJiter> - the JSON parser for consuming values
- `baton_cell`: RefCell<T> - user-defined state/context

Actions return `StreamOp`:
- `StreamOp::None` - no special handling needed
- `StreamOp::ValueIsConsumed` - action consumed the JSON value
- `StreamOp::Error(Box<dyn Error>)` - action failed with error

## Key APIs

### Primary Functions
- `scan()` - main function to process JSON streams with triggers
- `idtransform()` - identity transformation that copies JSON input to output
- `copy_atom()` - utility to copy JSON atomic values (strings, numbers, booleans, null)

### Types
- `Trigger<T>` - pairs a matcher with an action
- `BoxedAction<T>` - boxed action function type
- `BoxedEndAction<T>` - boxed end-action function type (called when key processing ends)
- `Options` - configuration for scan behavior (SSE tokens, early stopping)
- `ContextFrame` - represents current JSON parsing context

### Special Key Names
- `#top` - top-level context
- `#array` - array structures
- `#object` - object structures  
- `#atom` - atomic values (strings, numbers, booleans, null)

## Usage Examples

### Basic Trigger
```rust
use scan_json::{Name, Trigger, BoxedAction, StreamOp, rjiter::RJiter};
use std::cell::RefCell;
use std::io::Write;

let content_trigger: Trigger<BoxedAction<dyn Write>> = Trigger::new(
    Box::new(Name::new("content".to_string())),
    Box::new(|rjiter_cell: &RefCell<RJiter>, writer_cell: &RefCell<dyn Write>| {
        let mut rjiter = rjiter_cell.borrow_mut();
        let mut writer = writer_cell.borrow_mut();
        match rjiter.peek().and_then(|_| rjiter.write_long_bytes(&mut *writer)) {
            Ok(_) => StreamOp::ValueIsConsumed,
            Err(e) => StreamOp::Error(Box::new(e)),
        }
    })
);
```

### Processing LLM Streaming Output
The crate excels at processing LLM streaming responses, handling multiple JSON objects and filtering SSE tokens:

```rust
use scan_json::{scan, Name, BoxedAction, BoxedEndAction, Trigger, Options};

let options = Options {
    sse_tokens: vec!["data:".to_string(), "DONE".to_string()],
    stop_early: false,
};

scan(&triggers, &end_triggers, &rjiter_cell, &baton_cell, &options)
```

## Error Handling
The crate provides comprehensive error handling through the `Error` enum:
- `RJiterError` - underlying JSON parser errors
- `ActionError` - errors from user actions
- `UnbalancedJson` - malformed JSON structure
- `MaxNestingExceeded` - JSON nesting too deep (max 20 levels)
- `UnhandledPeek` - unexpected JSON tokens

## Dependencies
- `rjiter` (1.1.4) - streaming JSON parser providing the underlying parsing capability

## Advanced Features
- **Identity Transformation**: Complete example in `idtransform` module showing advanced scan usage
- **SSE Token Filtering**: Built-in support for ignoring server-sent event tokens
- **Early Stopping**: Option to stop processing as soon as possible vs. scanning complete streams
- **Nested Context**: Full context stack available to matchers for complex matching logic

For complete API documentation with all function signatures, see: llms-all.txt
